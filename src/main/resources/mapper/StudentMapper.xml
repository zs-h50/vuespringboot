<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.StudentMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.pojo.Student">
    <id column="s_id" jdbcType="BIGINT" property="sId" />
    <result column="s_no" jdbcType="VARCHAR" property="sNo" />
    <result column="s_name" jdbcType="VARCHAR" property="sName" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="s_phone" jdbcType="VARCHAR" property="sPhone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="id_card" jdbcType="VARCHAR" property="idCard" />
    <result column="contact" jdbcType="VARCHAR" property="contact" />
    <result column="contactphone" jdbcType="VARCHAR" property="contactphone" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="postcode" jdbcType="VARCHAR" property="postcode" />
    <result column="father" jdbcType="VARCHAR" property="father" />
    <result column="fatherphone" jdbcType="VARCHAR" property="fatherphone" />
    <result column="mather" jdbcType="VARCHAR" property="mather" />
    <result column="matherphone" jdbcType="VARCHAR" property="matherphone" />
    <result column="fettle" jdbcType="INTEGER" property="fettle" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="c_id" property="cId"/>
    <association property="fclass" javaType="Fclass">
    	<id column="c_id" property="cId" />
    	<result column="classname" property="classname" />
    	<result column="c_number" property="cNumber" />
    </association>
    <association property="houseHold" javaType="HouseHold">
    	<id column="h_id" jdbcType="BIGINT" property="hId" />
	    <result column="s_id" jdbcType="BIGINT" property="sId" />
	    <result column="genre" jdbcType="INTEGER" property="genre" />
	    <result column="h_name" jdbcType="VARCHAR" property="hName" />
	    <result column="h_gender" jdbcType="INTEGER" property="hGender" />
	    <result column="h_phone" jdbcType="VARCHAR" property="hPhone" />
	    <result column="h_birthday" jdbcType="DATE" property="hBirthday" />
	    <result column="h_card" jdbcType="VARCHAR" property="hCard" />
	    <result column="h_fettle" jdbcType="INTEGER" property="hFettle" />
	    <result column="h_remark" jdbcType="VARCHAR" property="hRemark" />
    </association>
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.demo.pojo.Student">
    <result column="situation" jdbcType="LONGVARCHAR" property="situation" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  
  <sql id="Base_Column_List">
    s_id, s_no, s_name, gender, s_phone, email, birthday, id_card, contact, contactphone, 
    address, postcode, father, fatherphone, mather, matherphone, fettle, remark, c_id
  </sql>
  
  <sql id="Blob_Column_List">
    situation
  </sql>
  
  <select id="selectByExampleWithBLOBs" parameterType="com.example.demo.pojo.StudentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  
  <select id="selectByExample" parameterType="com.example.demo.pojo.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="getStduents" parameterType="java.lang.String">
  		select s_no from student where s_no=#{sNo}
  </select>
  
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    where s_id = #{sId,jdbcType=BIGINT}
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from student
    where s_no = #{s_no,jdbcType=VARCHAR}
  </delete>
  
  
  <delete id="deleteByExample" parameterType="com.example.demo.pojo.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  
  <insert id="insert" parameterType="com.example.demo.pojo.Student">
    insert into student (s_id, s_no, s_name, 
      gender, s_phone, email, 
      birthday, id_card, contact, 
      contactphone, address, postcode, 
      father, fatherphone, mather, 
      matherphone, fettle, remark, 
      c_id, situation)
    values (#{sId,jdbcType=BIGINT}, #{sNo,jdbcType=VARCHAR}, #{sName,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{sPhone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{birthday,jdbcType=DATE}, #{idCard,jdbcType=VARCHAR}, #{contact,jdbcType=VARCHAR}, 
      #{contactphone,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{postcode,jdbcType=VARCHAR}, 
      #{father,jdbcType=VARCHAR}, #{fatherphone,jdbcType=VARCHAR}, #{mather,jdbcType=VARCHAR}, 
      #{matherphone,jdbcType=VARCHAR}, #{fettle,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, 
      #{cId,jdbcType=BIGINT}, #{situation,jdbcType=LONGVARCHAR})
  </insert>
  
  
  <insert id="insertSelective" parameterType="com.example.demo.pojo.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sId != null">
        s_id,
      </if>
      <if test="sNo != null">
        s_no,
      </if>
      <if test="sName != null">
        s_name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="sPhone != null">
        s_phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="idCard != null">
        id_card,
      </if>
      <if test="contact != null">
        contact,
      </if>
      <if test="contactphone != null">
        contactphone,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="postcode != null">
        postcode,
      </if>
      <if test="father != null">
        father,
      </if>
      <if test="fatherphone != null">
        fatherphone,
      </if>
      <if test="mather != null">
        mather,
      </if>
      <if test="matherphone != null">
        matherphone,
      </if>
      <if test="fettle != null">
        fettle,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="cId != null">
        c_id,
      </if>
      <if test="situation != null">
        situation,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sId != null">
        #{sId,jdbcType=BIGINT},
      </if>
      <if test="sNo != null">
        #{sNo,jdbcType=VARCHAR},
      </if>
      <if test="sName != null">
        #{sName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="sPhone != null">
        #{sPhone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="contact != null">
        #{contact,jdbcType=VARCHAR},
      </if>
      <if test="contactphone != null">
        #{contactphone,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="postcode != null">
        #{postcode,jdbcType=VARCHAR},
      </if>
      <if test="father != null">
        #{father,jdbcType=VARCHAR},
      </if>
      <if test="fatherphone != null">
        #{fatherphone,jdbcType=VARCHAR},
      </if>
      <if test="mather != null">
        #{mather,jdbcType=VARCHAR},
      </if>
      <if test="matherphone != null">
        #{matherphone,jdbcType=VARCHAR},
      </if>
      <if test="fettle != null">
        #{fettle,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="cId != null">
        #{cId,jdbcType=BIGINT},
      </if>
      <if test="situation != null">
        #{situation,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  
  
  <select id="countByExample" parameterType="com.example.demo.pojo.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.sId != null">
        s_id = #{record.sId,jdbcType=BIGINT},
      </if>
      <if test="record.sNo != null">
        s_no = #{record.sNo,jdbcType=VARCHAR},
      </if>
      <if test="record.sName != null">
        s_name = #{record.sName,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.sPhone != null">
        s_phone = #{record.sPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.idCard != null">
        id_card = #{record.idCard,jdbcType=VARCHAR},
      </if>
      <if test="record.contact != null">
        contact = #{record.contact,jdbcType=VARCHAR},
      </if>
      <if test="record.contactphone != null">
        contactphone = #{record.contactphone,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.postcode != null">
        postcode = #{record.postcode,jdbcType=VARCHAR},
      </if>
      <if test="record.father != null">
        father = #{record.father,jdbcType=VARCHAR},
      </if>
      <if test="record.fatherphone != null">
        fatherphone = #{record.fatherphone,jdbcType=VARCHAR},
      </if>
      <if test="record.mather != null">
        mather = #{record.mather,jdbcType=VARCHAR},
      </if>
      <if test="record.matherphone != null">
        matherphone = #{record.matherphone,jdbcType=VARCHAR},
      </if>
      <if test="record.fettle != null">
        fettle = #{record.fettle,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.cId != null">
        c_id = #{record.cId,jdbcType=BIGINT},
      </if>
      <if test="record.situation != null">
        situation = #{record.situation,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update student
    set s_id = #{record.sId,jdbcType=BIGINT},
      s_no = #{record.sNo,jdbcType=VARCHAR},
      s_name = #{record.sName,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      s_phone = #{record.sPhone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=DATE},
      id_card = #{record.idCard,jdbcType=VARCHAR},
      contact = #{record.contact,jdbcType=VARCHAR},
      contactphone = #{record.contactphone,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      postcode = #{record.postcode,jdbcType=VARCHAR},
      father = #{record.father,jdbcType=VARCHAR},
      fatherphone = #{record.fatherphone,jdbcType=VARCHAR},
      mather = #{record.mather,jdbcType=VARCHAR},
      matherphone = #{record.matherphone,jdbcType=VARCHAR},
      fettle = #{record.fettle,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      c_id = #{record.cId,jdbcType=BIGINT},
      situation = #{record.situation,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  <update id="updateByExample" parameterType="map">
    update student
    set s_id = #{record.sId,jdbcType=BIGINT},
      s_no = #{record.sNo,jdbcType=VARCHAR},
      s_name = #{record.sName,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      s_phone = #{record.sPhone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=DATE},
      id_card = #{record.idCard,jdbcType=VARCHAR},
      contact = #{record.contact,jdbcType=VARCHAR},
      contactphone = #{record.contactphone,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      postcode = #{record.postcode,jdbcType=VARCHAR},
      father = #{record.father,jdbcType=VARCHAR},
      fatherphone = #{record.fatherphone,jdbcType=VARCHAR},
      mather = #{record.mather,jdbcType=VARCHAR},
      matherphone = #{record.matherphone,jdbcType=VARCHAR},
      fettle = #{record.fettle,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      c_id = #{record.cId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.pojo.Student">
    update student
    <set>
      <if test="sNo != null">
        s_no = #{sNo,jdbcType=VARCHAR},
      </if>
      <if test="sName != null">
        s_name = #{sName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="sPhone != null">
        s_phone = #{sPhone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="contact != null">
        contact = #{contact,jdbcType=VARCHAR},
      </if>
      <if test="contactphone != null">
        contactphone = #{contactphone,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="postcode != null">
        postcode = #{postcode,jdbcType=VARCHAR},
      </if>
      <if test="father != null">
        father = #{father,jdbcType=VARCHAR},
      </if>
      <if test="fatherphone != null">
        fatherphone = #{fatherphone,jdbcType=VARCHAR},
      </if>
      <if test="mather != null">
        mather = #{mather,jdbcType=VARCHAR},
      </if>
      <if test="matherphone != null">
        matherphone = #{matherphone,jdbcType=VARCHAR},
      </if>
      <if test="fettle != null">
        fettle = #{fettle,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="cId != null">
        c_id = #{cId,jdbcType=BIGINT},
      </if>
      <if test="situation != null">
        situation = #{situation,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where s_id = #{sId,jdbcType=BIGINT}
  </update>
  
  
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.demo.pojo.Student">
    update student
    set s_no = #{sNo,jdbcType=VARCHAR},
      s_name = #{sName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      s_phone = #{sPhone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      id_card = #{idCard,jdbcType=VARCHAR},
      contact = #{contact,jdbcType=VARCHAR},
      contactphone = #{contactphone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      postcode = #{postcode,jdbcType=VARCHAR},
      father = #{father,jdbcType=VARCHAR},
      fatherphone = #{fatherphone,jdbcType=VARCHAR},
      mather = #{mather,jdbcType=VARCHAR},
      matherphone = #{matherphone,jdbcType=VARCHAR},
      fettle = #{fettle,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      c_id = #{cId,jdbcType=BIGINT},
      situation = #{situation,jdbcType=LONGVARCHAR}
    where s_id = #{sId,jdbcType=BIGINT}
  </update>
  
  
  <update id="updateByPrimaryKey" parameterType="com.example.demo.pojo.Student">
    update student
    set s_no = #{sNo,jdbcType=VARCHAR},
      s_name = #{sName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      s_phone = #{sPhone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      id_card = #{idCard,jdbcType=VARCHAR},
      contact = #{contact,jdbcType=VARCHAR},
      contactphone = #{contactphone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      postcode = #{postcode,jdbcType=VARCHAR},
      father = #{father,jdbcType=VARCHAR},
      fatherphone = #{fatherphone,jdbcType=VARCHAR},
      mather = #{mather,jdbcType=VARCHAR},
      matherphone = #{matherphone,jdbcType=VARCHAR},
      fettle = #{fettle,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      c_id = #{cId,jdbcType=BIGINT}
    where s_id = #{sId,jdbcType=BIGINT}
  </update>
  
  
  <select id="getAll" resultMap="BaseResultMap">
  		select s_id, s_no, s_name, gender, s_phone, email, birthday, id_card, contact, contactphone, address, postcode, father, fatherphone, mather, matherphone, fettle, remark,s.c_id,classname 
    from student as s 
    left join fclass as f on s.c_id = f.c_id
  </select>
  
  
  <select id="getStudent" resultMap="BaseResultMap">
  	select s_id, s_no, s_name, gender, s_phone, email, birthday, id_card, contact, contactphone, address, postcode, father, fatherphone, mather, matherphone, fettle, remark,s.c_id,classname 
    from student as s 
    left join fclass as f on s.c_id = f.c_id
    where s_no = #{sNo}
  </select>
  
</mapper>